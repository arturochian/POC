runApp(applocation , port = 7777, host='10.236.32.100')
shiny::runApp()
shiny::runApp()
library(dplyr)
library(plyr)
library(stringr)
options(stringsAsFactors=FALSE)
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
data <- load.csv('ps','data')
shiny::runApp()
wd <- getwd()
data <- load.csv('ps','data')
runApp(wd, port = 7777, host='10.236.32.100')
data <- load.csv('ps','data')
library(dplyr)
library(plyr)
library(stringr)
options(stringsAsFactors=FALSE)
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
wd <- getwd()
data <- load.csv('ps','data')
runApp(wd, port = 7777, host='10.236.32.100')
wd <- getwd()
runApp(wd, port = 7777, host='10.236.32.100')
traceback()
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
data <- load.csv('ps','data')
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
library(RODBC)
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
query<-paste("SELECT [OARSPartName] ,[ProductSubFamily] FROM [TBOR].[Util_PartDim]   where PartType = 'ORDERING PART' AND PartState NOT IN ('Ramp Down','Closed','Obsolete')")
query
odbcQuery(readA,query)
result<-sqlGetResults(readA)
result
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
query<-paste("SELECT [OARSPartName] ,[ProductSubFamily] FROM [TBOR].[Util_PartDim]   where PartType = 'ORDERING PART' AND PartState NOT IN ('Closed','Obsolete')")
odbcQuery(readA,query)
DIM <<-sqlGetResults(readA)
DIM[which(DIM$OARSPartName == 'GE412HIYJ44JBA'),]
test <- read.csv('/data/demandinstance.csv')
test <- read.csv(paste0(wd,'/data/demandinstance.csv'))
test[which(test$DEMAND_ITEM == 'GE412HIYJ44JBA'),]
newdata <<- merge(x = test, y = DIM, by.x = 'DEMAND_ITEM', by.y = 'OARSPartName')
newdata <<- merge(x = test, y = DIM, by.x = 'DEMAND_ITEM', by.y = 'OARSPartName', all.x=TRUE)
shiny::runApp()
shiny::runApp()
wd <- getwd()
runApp(wd, port = 7777, host='10.236.32.100')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data2 <- load.csv('demandchange','data')
shiny::runApp()
shiny::runApp()
data2 <- load.csv('demandchange','data')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data2
data2$Date <- as.Date(data2$Date)
data2$Date <- as.Date(data2$Date, format='/%d/%m/%Y')
data2
data2 <- load.csv('demandchange','data')
data2$Date <- as.Date(data2$Date, format='/%m/%d/%Y')
data2
data2 <- load.csv('demandchange','data')
shiny::runApp()
data2[,c(3)]
data2[1,c(3)]
str <- data2[1,c(3)]
str
as.Date(str,format = '/%m/%d/%Y')
as.Date(str,format = '%m/%d/%Y')
shiny::runApp()
data2$Date <- as.Date(data2$Date, format='%m/%d/%Y')
data2
shiny::runApp()
data2 <- load.csv('demandchange','data')
DATA2
data2
shiny::runApp()
data2$Date <- as.Date(data2$Date, format='%m/%d/%Y')
data2
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
wd <- getwd()
runApp(wd, port = 7777, host='10.236.32.100')
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
e <- new.env()
assign("x", 1, envir = e)
get("x", envir = e)
lockEnvironment(e)
get("x", envir = e)
assign("x", 2, envir = e)
try(assign("y", 2, envir = e)) # error
# locking bindings
e <- new.env()
assign("x", 1, envir = e)
get("x", envir = e)
lockBinding("x", e)
try(assign("x", 2, envir = e)) # error
unlockBinding("x", e)
assign("x", 2, envir = e)
get("x", envir = e)
# active bindings
f <- local( {
x <- 1
function(v) {
if (missing(v))
cat("get\n")
else {
cat("set\n")
x <<- v
}
x
}
})
makeActiveBinding("fred", f, .GlobalEnv)
bindingIsActive("fred", .GlobalEnv)
fred
fred <- 2
fred
bindingIsActive(x, .GlobalEnv)
bindingIsActive(x, e)
bindingIsActive("x", .GlobalEnv)
bindingIsActive("x", e)
environment()
x
e <- environment()
e
data
assign("x", 1, envir = e)
x
unlockBinding("data", e)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(newdata)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(Lahman)
library(plyr)
library(rCharts)
library(dplyr)
library(stringr)
library(shiny)
library(googleVis)
library(RODBC)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cars <- load.csv('cars','data')
cars
cars
cars <- load.csv('cars','data')
cars
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(plyr)
library(rCharts)
library(dplyr)
library(stringr)
library(shiny)
library(googleVis)
library(RODBC)
options(shiny.maxRequestSize=25*1024^2)
options(stringsAsFactors=FALSE)
#options(shiny.reactlog=TRUE)
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
query<-paste("SELECT [OARSPartName] ,[ProductSubFamily],[PartState] FROM [TBOR].[Util_PartDim]   where PartType = 'ORDERING PART'")
odbcQuery(readA,query)
DIM <<-sqlGetResults(readA)
odbcCloseAll()
dat <<- load.csv('ps','data')
data2 <<- load.csv('demandchange','data')
data2$Date <- as.Date(data2$Date, format='%m/%d/%Y')
src <- data.frame()
cars <- read.csv('data/cars.csv')
suppressPackageStartupMessages(library(googleVis))
cars
p1$setLib('libraries/widgets/parcoords')
p1$set(padding = list(top = 24, left = 0, bottom = 12, right = 200))
p1$set(
data = toJSONArray(cars, json = F),
colorby = 'economy',
range = range(cars$economy),
colors = c('steelblue', 'brown')
)
p1 <- rCharts$new()
p1$set(padding = list(top = 24, left = 0, bottom = 12, right = 200))
p1$set(
data = toJSONArray(cars, json = F),
colorby = 'economy',
range = range(cars$economy),
colors = c('steelblue', 'brown')
)
shiny::runApp()
shiny::runApp()
library(plyr)
library(rCharts)
library(dplyr)
library(stringr)
library(shiny)
library(googleVis)
library(RODBC)
options(shiny.maxRequestSize=25*1024^2)
options(stringsAsFactors=FALSE)
#options(shiny.reactlog=TRUE)
suppressPackageStartupMessages(library(googleVis))
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
query<-paste("SELECT [OARSPartName] ,[ProductSubFamily],[PartState] FROM [TBOR].[Util_PartDim]   where PartType = 'ORDERING PART'")
odbcQuery(readA,query)
DIM <<-sqlGetResults(readA)
odbcCloseAll()
dat <<- load.csv('ps','data')
data2 <<- load.csv('demandchange','data')
data2$Date <- as.Date(data2$Date, format='%m/%d/%Y')
src <- data.frame()
cars <- read.csv('data/cars.csv')
p1 <- rCharts$new()
# specify location of parcoords library folder.
p1$setLib('libraries/widgets/parcoords')
p1 <- rCharts$new()
p1$set(padding = list(top = 24, left = 0, bottom = 12, right = 200))
p1$set(
data = toJSONArray(cars, json = F),
colorby = 'economy',
range = range(cars$economy),
colors = c('steelblue', 'brown')
)
p1
class(p1)
plot(p1)
p1$setLib
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
suppressPackageStartupMessages(library(googleVis))
library(plyr)
library(rCharts)
library(dplyr)
library(stringr)
library(shiny)
library(googleVis)
library(RODBC)
options(shiny.maxRequestSize=25*1024^2)
options(stringsAsFactors=FALSE)
#options(shiny.reactlog=TRUE)
suppressPackageStartupMessages(library(googleVis))
load.csv <- function (filename,foldername = NULL) {
#assumption csv always comes with header
filetype <- '.csv'
df <- data.frame()
if(!is.null(foldername)){
foldername <- paste0(foldername,'/')
}
str <- paste(foldername,filename,filetype,sep='')
headset <- read.csv(str, nrows = 10)
classes <- sapply(headset,class)
df <- read.csv(str,stringsAsFactors=FALSE,colClasses=classes,strip.white=TRUE)
return(df)
}
readA <- odbcDriverConnect('driver={SQL Server};server=salarian;database=Reporting;trusted_connection=true')
query<-paste("SELECT [OARSPartName] ,[ProductSubFamily],[PartState] FROM [TBOR].[Util_PartDim]   where PartType = 'ORDERING PART'")
odbcQuery(readA,query)
DIM <<-sqlGetResults(readA)
odbcCloseAll()
dat <<- load.csv('ps','data')
data2 <<- load.csv('demandchange','data')
data2$Date <- as.Date(data2$Date, format='%m/%d/%Y')
src <- data.frame()
#values <- reactiveValues()
#tags$head(tags$script(src = 'http://d3js.org/d3.v3.min.js')),
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
